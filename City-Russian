from time import sleep
cheats = False
cites = 'x, –ê–±–∑–∞–∫–æ–≤–æ, –ê–¥–ª–µ—Ä, –ê–∑–æ–≤, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤, –ê–ª—É–ø–∫–∞, –ê–Ω–∞–ø–∞, –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫, –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, –ë–∞—Ä–Ω–∞—É–ª, –ë–µ–ª–æ–≥–æ—Ä—Å–∫, –ë–µ–ª–æ–∫—É—Ä–∏—Ö–∞, –ë–µ—Ä–µ–≥–æ–≤–æ–µ, –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑, –í–æ–ª–≥–æ–≥—Ä–∞–¥, –í–æ–ª–æ–≥–¥–∞, –í–æ—Ä–æ–Ω–µ–∂, –í—ã–±–æ—Ä–≥, –í—ã—à–Ω–∏–π –í–æ–ª–æ—á–µ–∫, –í—è–∑—å–º–∞, –ì–∞–≤—Ä–∏–ª–æ–≤ –ü–æ—Å–∞–¥, –ì–∞—Å–ø—Ä–∞, –ì–∞—Ç—á–∏–Ω–∞, –ì–µ–ª–µ–Ω–¥–∂–∏–∫, –ì–æ–ª—É–±–∏—Ü–∫–∞—è, –ì–æ—Ä–Ω–æ-–ê–ª—Ç–∞–π—Å–∫, –ì–æ—Ä–æ–¥–µ—Ü, –ì–æ—Ä—è—á–∏–π –ö–ª—é—á, –ì—Ä–æ–∑–Ω—ã–π, –ì—É—Ä–∑—É—Ñ, –î–∞–≥–æ–º—ã—Å, –î–∞—Ä–∞—Å—É–Ω, –î–µ—Ä–±–µ–Ω—Ç, –î–∂–∞–Ω—Ö–æ—Ç, –î–∂–µ–º–µ—Ç–µ, –î–∂—É–±–≥–∞, –î–∏–≤–µ–µ–≤–æ, –î–∏–≤–Ω–æ–º–æ—Ä—Å–∫–æ–µ, –î–º–∏—Ç—Ä–æ–≤, –î–æ–ª–∂–∞–Ω—Å–∫–∞—è, –î–æ–º–±–∞–π, –ï–≤–ø–∞—Ç–æ—Ä–∏—è, –ï–π—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ï–ª–∞–±—É–≥–∞, –ï–ª–µ—Ü, –ï—Å—Å–µ–Ω—Ç—É–∫–∏, –ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫, –ó–∞—Ä–∞–π—Å–∫, –ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥, –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫, –ó–æ–ª–æ—Ç–æ–µ, –ò–≤–∞–Ω–≥–æ—Ä–æ–¥, –ò–≤–∞–Ω–æ–≤–æ, –ò–∂–µ–≤—Å–∫, –ò–∑–±–µ—Ä–±–∞—à, –ò—Ä–∫—É—Ç—Å–∫, –ò—Å—Ç—Ä–∞, –ô–æ—à–∫–∞—Ä-–û–ª–∞, –ö–∞–∑–∞–Ω—å, –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –ö–∞–ª—É–≥–∞, –ö–∞–ª—è–∑–∏–Ω, –ö–∞—Å–∏–º–æ–≤, –ö–∞—Å–ø–∏–π—Å–∫, –ö–µ–º–µ—Ä–æ–≤–æ, –ö–µ—Ä—á—å, –ö–∏–Ω–µ—à–º–∞, –ö–∏—Ä–æ–≤, –ö–∏—Ä–æ–≤—Å–∫, –ö–∏—Å–ª–æ–≤–æ–¥—Å–∫, –ö–æ–∫—Ç–µ–±–µ–ª—å, –ö–æ–ª–æ–º–Ω–∞, –ö–æ—Ä–µ–∏–∑, –ö–æ—Å—Ç—Ä–æ–º–∞, –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ö—Ä–∏–Ω–∏—Ü–∞, –ö—Ä–æ–Ω—à—Ç–∞–¥—Ç, –ö—É–¥–µ–ø—Å—Ç–∞, –ö—É—Ä–≥–∞–Ω, –ö—É—Ä—Å–∫, –ö—É—á—É–≥—É—Ä—ã, –õ–∞–∑–∞—Ä–µ–≤—Å–∫–æ–µ, –õ–∞—Ö–¥–µ–Ω–ø–æ—Ö—å—è, –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–æ, –õ–æ–æ, –ú–∞–≥–∞—Å, –ú–∞–π–∫–æ–ø, –ú–∞–Ω–∂–µ—Ä–æ–∫, –ú–∞—Ä—Ü–∏–∞–ª—å–Ω—ã–µ –í–æ–¥—ã, –ú–∞—Ö–∞—á–∫–∞–ª–∞, –ú–∞—Ü–µ—Å—Ç–∞, –ú–µ–∂–≤–æ–¥–Ω–æ–µ, –ú–µ–∑–º–∞–π, –ú–∏—Å—Ö–æ—Ä, –ú–æ–Ω—á–µ–≥–æ—Ä—Å–∫, –ú–æ—Ä—Å–∫–æ–µ, –ú–æ—Å–∫–≤–∞, –ú—É—Ä–º–∞–Ω—Å–∫, –ú—É—Ä–æ–º, –ú—ã—Å–æ–≤–æ–µ, –ú—ã—à–∫–∏–Ω, –ù–∞—Ö–æ–¥–∫–∞, –ù–µ–±—É–≥, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ù–∏–∫–æ–ª–∞–µ–≤–∫–∞, –ù–æ–≤–∞—è –ê–Ω–∞–ø–∞, –ù–æ–≤–∞—è –ï–≤–ø–∞—Ç–æ—Ä–∏—è, –ù–æ–≤–æ–º–∏—Ö–∞–π–ª–æ–≤—Å–∫–∏–π, –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ù–æ–≤—ã–π –°–≤–µ—Ç, –û–ª–µ–Ω–µ–≤–∫–∞, –û–ª—å–≥–∏–Ω–∫–∞, –û–º—Å–∫, –û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ, –û—Ä–µ–Ω–±—É—Ä–≥, –ü–∞–≤–ª–æ–≤—Å–∫, –ü–∞–ª–µ—Ö, –ü–∞—Ä–∞—Ç—É–Ω–∫–∞, –ü–∞—Ä—Ç–µ–Ω–∏—Ç, –ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ, –ü–µ—Ä–µ—Å–ª–∞–≤–ª—å-–ó–∞–ª–µ—Å—Å–∫–∏–π, –ü–µ—Ä–µ—Å—ã–ø—å, –ü–µ—Ä–º—å, –ü–µ—Ç–µ—Ä–≥–æ—Ñ, –ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫, –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π, –ü–ª–µ—Å, –ü–æ–ø–æ–≤–∫–∞, –ü–æ—Å–µ–ª–æ–∫ –ó–∞ –†–æ–¥–∏–Ω—É, –ü–æ—Å–µ–ª–æ–∫ –ò–ª—å–∏—á, –ü—Ä–∞—Å–∫–æ–≤–µ–µ–≤–∫–∞, –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π, –ü—Ä–∏–º–æ—Ä—Å–∫–æ-–ê—Ö—Ç–∞—Ä—Å–∫, –ü—Ä–∏–æ–∑–µ—Ä—Å–∫, –ü—Å–∫–æ–≤, –ü—è—Ç–∏–≥–æ—Ä—Å–∫, –†–∂–µ–≤, –†–æ—Å—Ç–æ–≤ –í–µ–ª–∏–∫–∏–π, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –†—ã–±–∞—á—å–µ, –†—ã–±–∏–Ω—Å–∫, –†—è–∑–∞–Ω—å, –°–∞–∫–∏, –°–∞–º–∞—Ä–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–∞—Ä–∞—Ç–æ–≤, –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫, –°–≤–∏—è–∂—Å–∫, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, –°–µ–º–∏–±–∞–ª–∫–∏, –°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥, –°–µ—Ä–ø—É—Ö–æ–≤, –°–∏–º–µ–∏–∑, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –°–º–æ–ª–µ–Ω—Å–∫, –°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫–æ–µ, –°–æ—Ä—Ç–∞–≤–∞–ª–∞, –°–æ—á–∏, –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å, –°—Ç–∞—Ä–∞—è –õ–∞–¥–æ–≥–∞, –°—Ç–∞—Ä–∞—è –†—É—Å—Å–∞, –°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª, –°—É–¥–∞–∫, –°—É–∑–¥–∞–ª—å, –°—É–∫–∫–æ, –¢–∞–≥–∞–Ω—Ä–æ–≥, –¢–∞–º–∞–Ω—å, –¢–∞—Ä—É—Å–∞, –¢–≤–µ—Ä—å, –¢–µ–º—Ä—é–∫, –¢–µ—Ä–∏–±–µ—Ä–∫–∞, –¢–æ–±–æ–ª—å—Å–∫, –¢–æ–º—Å–∫, –¢–æ—Ä–∂–æ–∫, –¢—É–∞–ø—Å–µ, –¢—É–ª–∞, –¢—É—Ç–∞–µ–≤, –¢—é–º–µ–Ω—å, –£–≥–ª–∏—á, –£–ª–∞–Ω-–£–¥—ç, –£–ª—å—è–Ω–æ–≤—Å–∫, –£—Ñ–∞, –§–µ–æ–¥–æ—Å–∏—è, –§–æ—Ä–æ—Å, –•–∞–±–∞—Ä–æ–≤—Å–∫, –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫, –•–æ—Å—Ç–∞, –¶–∞—Ä—Å–∫–æ–µ –°–µ–ª–æ, –ß–µ–±–æ–∫—Å–∞—Ä—ã, –ß–µ–ª—è–±–∏–Ω—Å–∫, –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–æ–µ, –®–µ–ø—Å–∏, –®–µ—Ä–µ–≥–µ—à, –®–∏—Ä–æ–∫–∞—è –ë–∞–ª–∫–∞, –®–ª–∏—Å—Å–µ–ª—å–±—É—Ä–≥, –®—Ç–æ—Ä–º–æ–≤–æ–µ, –®—É—è, –©–µ–ª–∫–∏–Ω–æ, –≠–ª–∏—Å—Ç–∞, –≠—Å—Ç–æ-–°–∞–¥–æ–∫, –Æ–∂–Ω–∞—è –û–∑–µ—Ä–µ–µ–≤–∫–∞, –Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫, –Æ—Ä—å–µ–≤-–ü–æ–ª—å—Å–∫–∏–π, –Æ—Ä—å–µ–≤–µ—Ü, –Ø–ª—Ç–∞, –Ø—Ä–æ—Å–ª–∞–≤–ª—å, –ê–±–∞–∫–∞–Ω, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤, –ê–ª—É–ø–∫–∞, –ê–ª—É—à—Ç–∞, –ê–Ω–∞–¥—ã—Ä—å, –ê–Ω–∞–ø–∞, –ê–Ω–≥–∞—Ä—Å–∫, –ê—Ä–º–∞–≤–∏—Ä, –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫, –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, –ê—Ö—Ç—É–±–∏–Ω—Å–∫, –ë–∞–ª–∞–∫–ª–∞–≤–∞, –ë–∞–ª–∞–∫–æ–≤–æ, –ë–∞–ª–∞—à–∏—Ö–∞, –ë–∞–ª—Ç–∏–π—Å–∫, –ë–∞—Ä–Ω–∞—É–ª, –ë–∞—Ö—á–∏—Å–∞—Ä–∞–π, –ë–µ–ª–≥–æ—Ä–æ–¥, –ë–µ–ª–æ–∫—É—Ä–∏—Ö–∞, –ë–µ–ª–æ—Ä–µ—Ü–∫, –ë–∏–π—Å–∫, –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, –ë–æ–ª–æ–≥–æ–µ, –ë—Ä–∞—Ç—Å–∫, –ë—Ä—è–Ω—Å–∫, –ë—É–π–Ω–∞–∫—Å–∫, –í–∞–ª–¥–∞–π, –í–µ–ª–∏–∫–∏–µ –õ—É–∫–∏, –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –í–µ–ª–∏–∫–∏–π –£—Å—Ç—é–≥, –í–µ—Ä—Ö–æ—Ç—É—Ä—å–µ, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑, –í–ª–∞–¥–∏–º–∏—Ä, –í–æ–ª–≥–æ–≥—Ä–∞–¥, –í–æ–ª–≥–æ–¥–æ–Ω—Å–∫, –í–æ–ª–æ–≥–¥–∞, –í–æ—Ä–∫—É—Ç–∞, –í–æ—Ä–æ–Ω–µ–∂, –í—ã–±–æ—Ä–≥, –ì–∞—Ç—á–∏–Ω–∞, –ì–µ–ª–µ–Ω–¥–∂–∏–∫, –ì–æ—Ä–Ω–æ-–ê–ª—Ç–∞–π—Å–∫, –ì–æ—Ä–æ—Ö–æ–≤–µ—Ü, –ì—Ä–æ–∑–Ω—ã–π, –ì—É—Å–µ–≤, –ì—É—Å—å-–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π, –î–∞–ª–º–∞—Ç–æ–≤–æ, –î–µ—Ä–±–µ–Ω—Ç, –î–∑–µ—Ä–∂–∏–Ω—Å–∫, –î–º–∏—Ç—Ä–æ–≤, –î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π, –î—É–±–Ω–∞, –ï–≤–ø–∞—Ç–æ—Ä–∏—è, –ï–π—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ï–ª–∞–±—É–≥–∞, –ï—Å—Å–µ–Ω—Ç—É–∫–∏, –ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫, –ó–∞–¥–æ–Ω—Å–∫, –ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥, –ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫, –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫, –ó–ª–∞—Ç–æ—É—Å—Ç, –ò–≤–∞–Ω–æ–≤–æ, –ò–≥–∞—Ä–∫–∞, –ò–∂–µ–≤—Å–∫, –ò–Ω–Ω–æ–ø–æ–ª–∏—Å, –ò—Ä–∫—É—Ç—Å–∫, –ò—Å—Ç—Ä–∞, –ô–æ—à–∫–∞—Ä-–û–ª–∞, –ö–∞–∑–∞–Ω—å, –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, –ö–∞–ª—É–≥–∞, –ö–∞–ª—è–∑–∏–Ω, –ö–∞—Å–ø–∏–π—Å–∫, –ö–µ–º–µ—Ä–æ–≤–æ, –ö–µ—Ä—á—å, –ö–∏–¥–µ–∫—à–∞, –ö–∏—Ä–∂–∞—á, –ö–∏—Ä–æ–≤, –ö–∏—Å–ª–æ–≤–æ–¥—Å–∫, –ö–ª–∏–Ω, –ö–æ–≤—Ä–æ–≤, –ö–æ–∑–µ–ª—å—Å–∫, –ö–æ–ª–æ–º–Ω–∞, –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ, –ö–æ—Å—Ç—Ä–æ–º–∞, –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ö—Ä–æ–Ω—à—Ç–∞–¥—Ç, –ö—É—Ä–≥–∞–Ω, –ö—É—Ä—Å–∫, –õ–∏–ø–µ—Ü–∫, –ú–∞–≥–∞–¥–∞–Ω, –ú–∞–≥–∞—Å, –ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫, –ú–∞–π–∫–æ–ø, –ú–∞—Ö–∞—á–∫–∞–ª–∞, –ú–∏–∞—Å—Å, –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã, –ú–∏—Ä–Ω—ã–π, –ú–∏—á—É—Ä–∏–Ω—Å–∫, –ú–æ–∂–∞–π—Å–∫, –ú–æ—Å–∫–≤–∞,'
cites = cites.lower()
cites = cites.split(', ')
cites = set(cites)
cites = list(cites)
mistake = 0
ext = True
number = 1
last_messages = []
end_letter = ''
num = 0
def pro_bel():print('\n'*40)
if input('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ Enter\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å: ') == '':
    pro_bel()
else:
    pro_bel()
    print('–≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞')
    sleep(2)
    print('–í—Å–µ–≥–æ –µ—Å—Ç—å —Ç—Ä–∏ –≤–∏–¥–∞ –±–æ—Ç–æ–≤: –ê–≤—Ç–æ, –°—Ä–µ–¥–Ω–∏–π, –°–ª–æ–∂–Ω—ã–π')
    sleep(2)
    print('–ê–≤—Ç–æ üôÇ - –∏–≥—Ä–∞—é—Ç –±–æ—Ç—ã')
    sleep(2)
    print('–°—Ä–µ–¥–Ω–∏–π ü§® - –±–æ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç')
    sleep(2)
    print('–°–ª–æ–∂–Ω—ã–π üò† - –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–∞–∫ —á—Ç–æ–±—ã —Ç—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª(–∞)')
    sleep(2)
def if_is_difficult():
    global mistake
    mistake = 0
    if difficult == '–∞–≤—Ç–æ':pass
    elif difficult == '—Å—Ä–µ–¥–Ω–∏–π': pass
    elif difficult == '—Å–ª–æ–∂–Ω—ã–π':pass
    else:
        print('–û—à–∏–±–∫–∞!')
        mistake += 1
difficult = input('–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞: ')
difficult = difficult.lower()
if_is_difficult()
while mistake != 0:
    difficult = input('–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞: ')
    difficult = difficult.lower()
    if_is_difficult()
else:
    pro_bel()
print(f'–í–∞—à(–∏) –±–æ—Ç(—ã): {difficult.capitalize()}')
true = True
last_messages.append(f'–í–∞—à(–∏) –±–æ—Ç(—ã): {difficult.capitalize()}')
def answer_cite(cite):
    global ext
    global number
    global mistake
    global cites
    global end_letter
    global true
    if cite == 'x' and true:
        true = False
        if difficult == '–∞–≤—Ç–æ':
            end_letter = '–∞'
        else:
            end_letter = ''
    cite = cite.lower()
    alphabet_cite_start = {}
    alphabet_cite_end = {}
    if cites.count(cite) == 1 or cite == 'x':
        mistake = 0
        cites.remove(cite)
        if cite[-1] == '—å' or cite[-1] == '—ä' or cite[-1] == '—ã':
            cite = list(cite)
            cite.pop(-1)
            cite = ''.join(cite)
        if cite == 'x':
            end_letter = ''
        for i in cites:
            if i[0] in alphabet_cite_start:
                alphabet_cite_start[i[0]].extend([i])
            else:
                alphabet_cite_start[i[0]] = [i]
            if i[-1] in alphabet_cite_end:
                alphabet_cite_end[i[-1]].extend([i])
            else:
                alphabet_cite_end[i[-1]] = [i]
        if cite[0] == end_letter or end_letter == '':
            if end_letter == '' and difficult == '–∞–≤—Ç–æ':
                end_letter = '–∞'
            else:
                if end_letter == '—å' or end_letter == '—ä' and end_letter == '—ã':
                    end_letter = cite[-2]
                else:
                    end_letter = cite[-1]
            if difficult == '–∞–≤—Ç–æ':
                sleep(0.8)
                if end_letter in alphabet_cite_start:
                    if len(alphabet_cite_start[end_letter]) != 0:
                        print(f'–ë–æ—Ç-–∞–≤—Ç–æ ‚Ññ{number} –ø—Ä–∏–¥—É–º–∞–ª: {alphabet_cite_start[end_letter][0].title()}')
                else:
                    print(f'–ë–æ—Ç-–∞–≤—Ç–æ ‚Ññ{number} –ø—Ä–æ–∏–≥—Ä–∞–ª üò•')
                    ext = False
                if end_letter in alphabet_cite_start.keys():
                    word = alphabet_cite_start[end_letter][0].lower()
                    if type(alphabet_cite_start[end_letter]) == type(''):
                        word = alphabet_cite_start[end_letter].lower()
                else:
                    word = ''
                if number == 2:
                    number = 1
                else:
                    number += 1
                if ext:
                    answer_cite(word)
            elif difficult == '—Å—Ä–µ–¥–Ω–∏–π':
                ot_vet = ''
                mistake = 1
                if end_letter == 'x':
                    end_letter = ''
                pro_ver_ka = True
                if end_letter != '':
                    if end_letter not in alphabet_cite_start:
                        mistake = 3
                while mistake != 0 and mistake != 3:
                    if mistake == 1 and pro_ver_ka:
                        mistake = 0
                        pro_ver_ka = False
                    if end_letter != '':
                        if cheats:
                            alphabet_end_letter = alphabet_cite_start[end_letter]
                            alphabet_end_letter = ' '.join(alphabet_end_letter)
                            print('\n–•–∞–∫–µ—Ä ü•∏: –í–æ—Ç –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n')
                            print(alphabet_end_letter)
                        ot_vet = input(f'–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É - "{end_letter.title()}": ')
                        ot_vet = ot_vet.lower()
                    else:
                        ot_vet = input(f'–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –ª—é–±—É—é –±—É–∫–≤—É: ')
                        ot_vet = ot_vet.lower()
                    mistake += 1
                    if ot_vet in cites:
                        if ot_vet[0] == end_letter or end_letter == '':
                            mistake = 0
                            if ot_vet[-1] == '—å' or ot_vet[-1] == '—ä' and ot_vet[-1] == '—ã':
                                end_letter = ot_vet[-2]
                            else:
                                end_letter = ot_vet[-1]
                            last_messages.append(f'–í—ã: {ot_vet.title()}')
                            for i in last_messages:
                                print(i)
                    if mistake != 0:
                        if mistake != 3:
                            print(f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ ‚òπÔ∏è: {3-mistake}')
                else:
                    if not ot_vet in cites:
                        print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•')
                    else:
                        cites.remove(ot_vet)
                        alphabet_cite_start = {}
                        alphabet_cite_end = {}
                        for i in cites:
                            if i[0] in alphabet_cite_start:
                                old_cite_start = alphabet_cite_start[i[0]]
                                if i in alphabet_cite_start.keys():
                                    alphabet_cite_start[i[0]].extend([i, old_cite_start])
                                else:
                                    alphabet_cite_start[i[0]] = [i, old_cite_start]
                            else:
                                alphabet_cite_start[i[0]] = i
                            if i[-1] in alphabet_cite_end:
                                old_cite_end = alphabet_cite_end[i[-1]]
                                if i in alphabet_cite_end.keys():
                                    alphabet_cite_end[i[-1]].extend([i, old_cite_end])
                                else:
                                    alphabet_cite_end[i[-1]] = [i, old_cite_end]
                            else:
                                alphabet_cite_end[i[-1]] = i
                    if mistake == 0:
                        pro_bel()
                    if end_letter in alphabet_cite_start:
                        last_messages.append(f'–ë–æ—Ç-—Å—Ä–µ–¥–Ω–∏–π ü§®: {alphabet_cite_start[end_letter][0].title()}')
                        pro_bel()
                        for i in last_messages:
                            print(i)
                    else:
                        if mistake == 0:
                            print(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üôÇ')
                        ext = False
                    if end_letter in alphabet_cite_start.keys():
                        word = alphabet_cite_start[end_letter][0].lower()
                        if type(alphabet_cite_start[end_letter]) == type(''):
                            word = alphabet_cite_start[end_letter].lower()
                    else:
                        word = ''
                    if ext:
                        answer_cite(word)
            elif difficult == '—Å–ª–æ–∂–Ω—ã–π':
                ot_vet = ''
                mistake = 1
                if end_letter == 'x':
                    end_letter = ''
                pro_ver_ka = True
                if end_letter != '':
                    if end_letter not in alphabet_cite_start:
                        mistake = 3
                        ot_vet = 'x'
                while mistake != 0 and mistake != 3:
                    if mistake == 1 and pro_ver_ka:
                        mistake = 0
                        pro_ver_ka = False
                    if end_letter != '':
                        if cheats:
                            alphabet_end_letter = alphabet_cite_start[end_letter]
                            alphabet_end_letter = ' '.join(alphabet_end_letter)
                            print('\n–•–∞–∫–µ—Ä ü•∏: –í–æ—Ç –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n')
                            print(alphabet_end_letter)
                        ot_vet = input(f'–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É - "{end_letter.title()}": ')
                        ot_vet = ot_vet.lower()
                    else:
                        ot_vet = input(f'–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –ª—é–±—É—é –±—É–∫–≤—É: ')
                        ot_vet = ot_vet.lower()
                    mistake += 1
                    if ot_vet in cites:
                        if ot_vet[0] == end_letter or end_letter == '':
                            mistake = 0
                            if ot_vet[-1] == '—å' or ot_vet[-1] == '—ä' and ot_vet[-1] == '—ã':
                                end_letter = ot_vet[-2]
                            else:
                                end_letter = ot_vet[-1]
                            last_messages.append(f'–í—ã: {ot_vet.title()}')
                            for i in last_messages:
                                print(i)
                    if mistake != 0:
                        if mistake != 3:
                            print(f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ ‚òπÔ∏è: {3 - mistake}')
                else:
                    if not ot_vet in cites:
                        print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò•')
                    else:
                        cites.remove(ot_vet)
                        alphabet = {'–∞': [], '–±': [], '–≤': [], '–≥': [], '–¥': [], '–µ': [], '—ë': [], '–∂': [],
                                    '–∑': [], '–∏': [], '–π': [], '–∫': [], '–ª': [], '–º': [], '–Ω': [], '–æ': [],
                                    '–ø': [], '—Ä': [], '—Å': [], '—Ç': [], '—É': [], '—Ñ': [], '—Ö': [], '—Ü': [],
                                    '—á': [], '—à': [], '—â': [], '—ä': [], '—ã': [], '—å': [], '—ç': [], '—é': [],
                                    '—è': []}
                        alphabet_for = {'–∞': [], '–±': [], '–≤': [], '–≥': [], '–¥': [], '–µ': [], '—ë': [], '–∂': [],
                                    '–∑': [], '–∏': [], '–π': [], '–∫': [], '–ª': [], '–º': [], '–Ω': [], '–æ': [],
                                    '–ø': [], '—Ä': [], '—Å': [], '—Ç': [], '—É': [], '—Ñ': [], '—Ö': [], '—Ü': [],
                                    '—á': [], '—à': [], '—â': [], '—ä': [], '—ã': [], '—å': [], '—ç': [], '—é': [],
                                    '—è': []}
                        alphabet_end_letter_end = []
                        if end_letter not in alphabet_cite_start:
                            print('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üôÇ')
                        else:
                            alphabet_end_letter = alphabet_cite_start[end_letter]
                            alphabet_cite_end = {}
                            for i in alphabet_end_letter:
                                if i[-1] in alphabet_cite_end:
                                    if i[-1] == '—å' or i[-1] == '—ã' or i[-1] == '—ä':
                                        alphabet_cite_end[i[-2]].extend([i])
                                    else:
                                        alphabet_cite_end[i[-1]].extend([i])
                                else:
                                    if i[-1] == '—å' or i[-1] == '—ã' or i[-1] == '—ä':
                                        alphabet_cite_end[i[-2]] = [i]
                                    else:
                                        alphabet_cite_end[i[-1]] = [i]
                            for i in alphabet_end_letter:
                                if i[-1] == '—å' or i[-1] == '—ã' or i[-1] == '—ä':
                                    alphabet_end_letter_end.append(i[-2])
                                else:
                                    alphabet_end_letter_end.append(i[-1])
                            for i in alphabet_for:
                                if i not in alphabet_end_letter_end:
                                    alphabet.pop(i)
                            for i in alphabet_end_letter:
                                if i[-1] in alphabet_cite_start.keys():
                                    alphabet[i[-1]].extend(alphabet_cite_start[i[-1]])
                            for i in alphabet:
                                alphabet[i] = len(alphabet[i])
                            minimum = min(alphabet.values())
                            word = ''
                            word_hard = ''
                            for i in alphabet:
                                if alphabet[i] == minimum:
                                    word = i
                            if len(alphabet_end_letter) != 0:
                                last_messages.append(f'–ë–æ—Ç-—Å–ª–æ–∂–Ω—ã–π üò†: {alphabet_cite_end[word][0].title()}')
                                print(f'–ë–æ—Ç-—Å–ª–æ–∂–Ω—ã–π üò†: {alphabet_cite_end[word][0].title()}')
                                word_hard = alphabet_cite_end[word][0]
                            else:
                                if mistake == 0:
                                    print(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üôÇ')
                                ext = False
                            if ext:
                                answer_cite(word_hard)
        else:
            print('–û—à–∏–±–∫–∞!')
    else:
        print('–û—à–∏–±–∫–∞!')
answer_cite('x')
